/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    news: News;
    'news-tags': NewsTag;
    archives: Archive;
    'archive-categories': ArchiveCategory;
    guidelines: Guideline;
    media: Media;
    users: User;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    news: NewsSelect<false> | NewsSelect<true>;
    'news-tags': NewsTagsSelect<false> | NewsTagsSelect<true>;
    archives: ArchivesSelect<false> | ArchivesSelect<true>;
    'archive-categories': ArchiveCategoriesSelect<false> | ArchiveCategoriesSelect<true>;
    guidelines: GuidelinesSelect<false> | GuidelinesSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    'editorial-board': EditorialBoard;
  };
  globalsSelect: {
    'editorial-board': EditorialBoardSelect<false> | EditorialBoardSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "news".
 */
export interface News {
  id: string;
  featureImage?: (string | null) | Media;
  /**
   * Title for your news post.
   */
  title: string;
  /**
   * Who wrote this news post.
   */
  author?: (string | null) | User;
  publishedDate?: string | null;
  /**
   * Categorize your news post using tags.
   */
  tags?: (string | NewsTag)[] | null;
  /**
   * Write anything about your news/story article.
   */
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  readTime?: number | null;
  /**
   * Draft posts aren't visible on the website, but you can keep writing them. Set to publish to make it visible.
   */
  status?: ('draft' | 'published') | null;
  /**
   * A unique identifier for this news post's page.
   */
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  /**
   * Recommended: <Collection_Name> - <Purpose>. e.g. news - journal showcase event.
   */
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * Manage admins, moderators, and user roles here.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  role: 'admin' | 'user';
  avatarImage?: (string | null) | Media;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  _verified?: boolean | null;
  _verificationToken?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * Tags related to the news post you make to categorize them. e.g. Research, Story, etc.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "news-tags".
 */
export interface NewsTag {
  id: string;
  /**
   * A unique tag name that you can attach on your post to categorize them.
   */
  name?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "archives".
 */
export interface Archive {
  id: string;
  /**
   * Recommended Size: 720px(w) x 1080px(h)
   */
  archiveCover?: (string | null) | Media;
  /**
   * Title of this archive.
   */
  title: string;
  /**
   * A longer description about what this archived item is about.
   */
  about?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  publishedDate?: string | null;
  /**
   * The downloadable PDF File that can also be a flipbook on the website.
   */
  pdf?: (string | null) | Media;
  categories?: (string | ArchiveCategory)[] | null;
  /**
   * A unique identifier for this archive item's page.
   */
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Categories related to the archives to categorize them for filtering. e.g. Mariale, Transformateur, Science, etc.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "archive-categories".
 */
export interface ArchiveCategory {
  id: string;
  /**
   * A unique category name that you can attach on an archive item to categorize it.
   */
  name?: string | null;
}
/**
 * This is where you write guidelines for students. It can serve as their wiki page of what to do in research class.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "guidelines".
 */
export interface Guideline {
  id: string;
  /**
   * The title for this guide. e.g. "How to do Review of Related Literature
   */
  title: string;
  /**
   * Write anything about your guide.
   */
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * By default, all order numbers are 100. But you can prioritize others to appear first by manually changing this to 1, 2, 3, etc.
   */
  orderNumber?: number | null;
  /**
   * A unique identifier for this guideline's page.
   */
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'news';
        value: string | News;
      } | null)
    | ({
        relationTo: 'news-tags';
        value: string | NewsTag;
      } | null)
    | ({
        relationTo: 'archives';
        value: string | Archive;
      } | null)
    | ({
        relationTo: 'archive-categories';
        value: string | ArchiveCategory;
      } | null)
    | ({
        relationTo: 'guidelines';
        value: string | Guideline;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "news_select".
 */
export interface NewsSelect<T extends boolean = true> {
  featureImage?: T;
  title?: T;
  author?: T;
  publishedDate?: T;
  tags?: T;
  content?: T;
  readTime?: T;
  status?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "news-tags_select".
 */
export interface NewsTagsSelect<T extends boolean = true> {
  name?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "archives_select".
 */
export interface ArchivesSelect<T extends boolean = true> {
  archiveCover?: T;
  title?: T;
  about?: T;
  publishedDate?: T;
  pdf?: T;
  categories?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "archive-categories_select".
 */
export interface ArchiveCategoriesSelect<T extends boolean = true> {
  name?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "guidelines_select".
 */
export interface GuidelinesSelect<T extends boolean = true> {
  title?: T;
  content?: T;
  orderNumber?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  avatarImage?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  _verified?: T;
  _verificationToken?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "editorial-board".
 */
export interface EditorialBoard {
  id: string;
  /**
   * A "board group" single hierarchical group containing members.
   */
  boardGroups?:
    | {
        heading: string;
        members?:
          | {
              /**
               * Recommended Size: 100px(w) x 100px(h)
               */
              profileImage?: (string | null) | Media;
              name: string;
              subtitle: string;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "editorial-board_select".
 */
export interface EditorialBoardSelect<T extends boolean = true> {
  boardGroups?:
    | T
    | {
        heading?: T;
        members?:
          | T
          | {
              profileImage?: T;
              name?: T;
              subtitle?: T;
              id?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}